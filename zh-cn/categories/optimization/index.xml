<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Optimization on Keqi的博客</title><link>https://keqiye.github.io/zh-cn/categories/optimization/</link><description>Recent content in Optimization on Keqi的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>plloningye@gmail.com (Keqi Ye)</managingEditor><webMaster>plloningye@gmail.com (Keqi Ye)</webMaster><copyright>Example Person</copyright><atom:link href="https://keqiye.github.io/zh-cn/categories/optimization/index.xml" rel="self" type="application/rss+xml"/><item><title>7 Step Optimization of Parallel Reduction with CUDA</title><link>https://keqiye.github.io/zh-cn/posts/parallel-reduction-with-cuda/blog-parallel-reduction-with-cuda/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>plloningye@gmail.com (Keqi Ye)</author><guid>https://keqiye.github.io/zh-cn/posts/parallel-reduction-with-cuda/blog-parallel-reduction-with-cuda/</guid><description>&lt;h2 id="写在前面">写在前面
&lt;/h2>&lt;blockquote>
&lt;p>📚 &lt;strong>版权声明 | Copyright Notice&lt;/strong>&lt;/p>
&lt;p>本文内容参考并部分翻译自以下两篇资料：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://developer.download.nvidia.com/assets/cuda/files/reduction.pdf" target="_blank" rel="noopener"
>NVIDIA 官方 PPT（reduction.pdf）&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://medium.com/@rimikadhara/7-step-optimization-of-parallel-reduction-with-cuda-33a3b2feafd8" target="_blank" rel="noopener"
>Medium 博客：7 Step Optimization of Parallel Reduction with CUDA&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>上述资料版权归原作者所有。本文旨在学习和技术传播，仅供个人和学术使用。如有侵权，请联系删除。&lt;/p>
&lt;p>This article is a study and partial translation based on the works above. All rights belong to the original authors. The content is shared for learning and research purposes only. Please contact for removal if there is any infringement.&lt;/p>
&lt;/blockquote>
&lt;p>⚠️ &lt;strong>若上述链接失效&lt;/strong>，读者可以在 Google 中使用关键词查找：&lt;br>
&lt;code>7 Step Optimization of Parallel Reduction with CUDA&lt;/code>&lt;/p>
&lt;p>本文将介绍如何优化 CUDA 中的并行规约算法 (Parallel Reduction)，并通过七个步骤逐步提升性能。尽管上述链接中作者已经说明的十分清楚。我这里还是会使用中文再走一边流程，一来为中文互联网提供参考资料，二来为我自己学习。&lt;/p>
&lt;p>CUDA并行代码与串行代码的整体设计思路相差很大，虽然是按照线程来编写，但是要从Block层面去思考和设计。&lt;/p>
&lt;h2 id="什么是-parallel-reduction-算法">什么是 Parallel Reduction 算法？
&lt;/h2>&lt;p>让我们首先了解一下 Parallel Reduction 算法的基本概念。它是一种 &lt;strong>数据并行原语&lt;/strong>，在 CUDA 中实现相对直接。简单来说，Parallel Reduction 的目标是通过 GPU 的线程层级结构并行地对向量、矩阵或张量进行归约操作。&lt;/p>
&lt;p>这种归约是通过如 &lt;code>sum()&lt;/code>、&lt;code>min()&lt;/code>、&lt;code>max()&lt;/code> 或 &lt;code>avg()&lt;/code> 等操作来实现的，用于对数据进行聚合与简化。事实上，对一个数组求上述操作是十分简单的，如果想实现 CUDA 并行，核心难度在于访存设计。若处理不当，即使是这些“看似简单”的计算也可能变得耗时。&lt;/p>
&lt;p>高效实现 Parallel Reduction 的一个原因是它们非常通用，并在许多应用中起着关键作用。我主要使用SPH研究小行星撞击，每一步SPH求解过程中，都需要进行包围盒计算，对应着 &lt;code>min()&lt;/code>、&lt;code>max()&lt;/code> 操作。&lt;/p>
&lt;h3 id="树形归约模型tree-based-reduction">树形归约模型（Tree-based Reduction）
&lt;/h3>&lt;p>并行归约可以被类比为一种“树状归约”（tree-based reduction）过程：数据在各线程块（thread block）之间逐层归约。&lt;/p>
&lt;p>但这里出现了一个关键问题：&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>我们如何在不同线程块之间传递中间结果？&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>最直接的想法是使用“全局同步（global synchronization）” —— 先让每个线程块完成一部分计算，然后进行全局同步并继续递归处理。&lt;/p>
&lt;p>然而，CUDA &lt;strong>并不支持全局同步&lt;/strong>，因为这在硬件上开销极大，还可能导致死锁，只能使用少量线程块，限制性能提升。&lt;/p>
&lt;p>📌 &lt;strong>更实用的方案是：Kernel 分解（Kernel Decomposition）&lt;/strong>&lt;/p>
&lt;h3 id="kernel-分解kernel-decomposition">Kernel 分解（Kernel Decomposition）
&lt;/h3>&lt;p>为了更高效地传递线程块间的中间结果，我们可以将一个大的 kernel 拆分为多个小 kernel。这种做法被称为 &lt;strong>Kernel 分解&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://keqiye.github.io/images/tree-reduction.png"
loading="lazy"
alt="Tree-based Reduction"
>&lt;/p>
&lt;p>Kernel 分解的优势包括：&lt;/p>
&lt;ul>
&lt;li>减少硬件与软件开销&lt;/li>
&lt;li>提高资源利用率&lt;/li>
&lt;li>避免线程块间同步&lt;/li>
&lt;li>提升整体执行效率&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="注意">注意！
&lt;/h3>&lt;p>本文重点讲解规约（reduction）的基本思想，而非完整的最终实现。因此，每个 kernel 的执行结果并不是一个全局单一值，而是 &lt;strong>每个 block 内部的规约结果&lt;/strong>。&lt;/p>
&lt;p>具体来说：&lt;/p>
&lt;ul>
&lt;li>每个 block 负责处理若干个线程的(&lt;code>blockDim&lt;/code>)数据，并在 block 内完成一次局部规约；&lt;/li>
&lt;li>每个 block 的结果会被写入输出数组的 &lt;code>blockIdx.x&lt;/code> 位置；&lt;/li>
&lt;li>因此，最终输出数组的长度等于 &lt;code>gridDim.x&lt;/code>（即 block 数量），而不是单个元素。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="性能衡量指标our-metrics">性能衡量指标（Our Metrics）
&lt;/h3>&lt;p>我们衡量并行归约算法性能的两个关键指标是：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>时间（Time）&lt;/strong>&lt;/li>
&lt;li>&lt;strong>带宽（Bandwidth）&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>这两个指标反映了 GPU 是否达到了峰值性能。我们希望在以下两方面进行优化：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>提高数据读写效率&lt;/strong>&lt;/li>
&lt;li>&lt;strong>加快计算速度、提升线程利用率&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>一段理想的 GPU 程序，不仅运行快速，还能使大多数线程都在工作。&lt;/p>
&lt;h2 id="reduce-0交错寻址法interleaved-addressing">REDUCE-0：交错寻址法（Interleaved Addressing）
&lt;/h2>&lt;h3 id="思路介绍">思路介绍
&lt;/h3>&lt;p>最朴素的一种并行归约方法是采用“交错寻址（Interleaved Addressing）”，作为我们优化过程的基础版本。在这种方法中：&lt;/p>
&lt;ul>
&lt;li>每个线程处理一组元素；&lt;/li>
&lt;li>每轮归约时，线程将其当前值与一段距离内的另一个元素值相加；&lt;/li>
&lt;li>每轮步长加倍，直到最终得出该 block 的归约结果。&lt;/li>
&lt;/ul>
&lt;p>📘 例如，对于一个 1024 元素数组，使用 256 线程块，每个线程处理四个间隔为 256 的数据点。&lt;/p>
&lt;p>这种方式可以确保：&lt;/p>
&lt;ul>
&lt;li>各线程并行工作，负载均衡；&lt;/li>
&lt;li>线程间同步更简单；&lt;/li>
&lt;li>便于 GPU 高效执行。&lt;/li>
&lt;/ul>
&lt;h3 id="cuda-代码实现">CUDA 代码实现
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="n">REDUCTION&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="err">–&lt;/span> &lt;span class="n">Interleaved&lt;/span> &lt;span class="n">Addressing&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">__global__&lt;/span> &lt;span class="n">void&lt;/span> &lt;span class="n">reduce0&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ne">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">g_in_data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ne">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">g_out_data&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">extern&lt;/span> &lt;span class="n">__shared__&lt;/span> &lt;span class="ne">int&lt;/span> &lt;span class="n">sdata&lt;/span>&lt;span class="p">[];&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="n">stored&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">shared&lt;/span> &lt;span class="n">memory&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">Each&lt;/span> &lt;span class="n">thread&lt;/span> &lt;span class="n">loading&lt;/span> &lt;span class="n">one&lt;/span> &lt;span class="n">element&lt;/span> &lt;span class="n">from&lt;/span> &lt;span class="n">global&lt;/span> &lt;span class="n">onto&lt;/span> &lt;span class="n">shared&lt;/span> &lt;span class="n">memory&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">unsigned&lt;/span> &lt;span class="ne">int&lt;/span> &lt;span class="n">tid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threadIdx&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span>&lt;span class="n">tid表示当前线程在所在&lt;/span> &lt;span class="n">block&lt;/span> &lt;span class="err">中的局部索引&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">unsigned&lt;/span> &lt;span class="ne">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">blockIdx&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">blockDim&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">threadIdx&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="n">i表示当前线程在整个&lt;/span> &lt;span class="n">grid&lt;/span> &lt;span class="err">中的全局线程编号&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sdata&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">tid&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">g_in_data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">__syncthreads&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">Reduction&lt;/span> &lt;span class="n">method&lt;/span> &lt;span class="o">--&lt;/span> &lt;span class="n">occurs&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">shared&lt;/span> &lt;span class="n">memory&lt;/span> &lt;span class="n">because&lt;/span> &lt;span class="n">that&lt;/span>&lt;span class="s1">&amp;#39;s where sdata is stored&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unsigned&lt;/span> &lt;span class="ne">int&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">blockDim&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">tid&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sdata&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">tid&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">sdata&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">tid&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">__syncthreads&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">tid&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">g_out_data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">blockIdx&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sdata&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="该方法存在的问题">该方法存在的问题
&lt;/h3>&lt;p>虽然这种方法是并行编程的良好基础，但它仍存在一些问题。让我们回顾一下性能指标，分析代码在计算和内存方面可能存在的低效之处。&lt;/p>
&lt;p>&lt;strong>计算方面：&lt;/strong> 一个主要的计算低效是 &lt;code>%&lt;/code> 操作符的使用。由于 &lt;code>%&lt;/code> 涉及除法操作，而除法在底层是非常慢的操作，这会严重影响性能，特别是在大量线程频繁执行该操作的内核中。此外，交错寻址模式导致了严重的 warp 发散（divergence），因为同一个 warp 中的线程需要执行不同的分支路径（基于当前的 &lt;code>if&lt;/code> 条件）。这种路径发散导致 warp 需要等待较慢的线程完成，造成阻塞，从而严重降低性能。具体而言，代码块：
、、、CUDA
for(unsigned int s = 1; s &amp;lt; blockDim.x; s *= 2){
if (tid % (2 * s) == 0) {
sdata[tid] += sdata[tid + s];&lt;br>
}
__syncthreads();
}
、、、
第一个for，激活的线程为0，2，4&amp;hellip;；第二次执行for循环，激活的线程为0，4，8&amp;hellip; 显然，每个for循环中只有有50%，25%。。。的线程处于激活状态，这显然是我们不想看到了。我们希望尽可能多的线程都处于工作状态，至少在同一个warp中是如此。&lt;/p>
&lt;p>&lt;strong>内存方面：&lt;/strong> 由于 warp 发散，该方法的内存访问模式不佳。每个线程访问的数据元素分布在整个数组中，导致内存访问分散而非合并访问（coalesced），从而造成带宽利用率低下和较高的内存延迟。这种分散访问会引起多次缓慢的内存事务，而非一次快速事务，未能充分利用 GPU 的内存带宽能力。不过，这个问题我们会在后续的优化中开始解决。具体来说
轮次 5: s = 16
if (tid % 32 == 0): 在Warp 0 (线程0-31)中，只有线程0在工作。
它读取 sdata[16]。
访存分析: 整个Warp为了满足线程0这一个读取请求，发起了一次内存事务。但这次事务中，只有1/32的数据被利用了。31/32的内存带宽被浪费了！&lt;/p>
&lt;p>首先，我们先关注计算相关的问题，并进行下一步优化。&lt;/p>
&lt;h2 id="reduce-1交错寻址法-20interleaved-addressing-20">REDUCE-1：交错寻址法 2.0（Interleaved Addressing 2.0）
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">// REDUCTION 1 – Interleaved Addressing 2.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">__global__ void reduce1(int *g_in_data, int *g_out_data){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> extern __shared__ int sdata[]; // 储存在共享内存中
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 每个线程从全局内存加载一个元素到共享内存
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> unsigned int tid = threadIdx.x;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> unsigned int i = blockIdx.x * blockDim.x + threadIdx.x;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sdata[tid] = g_in_data[i];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> __syncthreads();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 归约操作 -- 在共享内存中进行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for(unsigned int s = 1; s &amp;lt; blockDim.x; s *= 2){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 注意步长 s *= 2：这导致了交错寻址
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int index = 2 * s * tid; // 现在我们不再需要 if 条件带来的分化分支
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 确保不会越界访问
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (index &amp;lt; blockDim.x)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sdata[index] += sdata[index + s]; // s 用来表示将被合并的偏移量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> __syncthreads();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 线程0将最终结果写回全局内存
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (tid == 0){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> g_out_data[blockIdx.x] = sdata[0];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item></channel></rss>